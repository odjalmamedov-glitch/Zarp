import logging
import pandas as pd
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

# === –¢–æ–∫–µ–Ω Telegram ===
TOKEN = "8299236175:AAErk_3tfiJoN_2sQigg5VekEyPzDcxP3qg"

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === ID —Ç–∞–±–ª–∏—Ü—ã ===
SHEET_ID = "1npQ1h6ugPMZXxrNvngAbSsw0oiH2tT4Tx0cwPWqc_aU"

# === –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
user_state = {}

# === –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–æ–≤ ===
SHEET_MAP = {
    "admin": {
        "current": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã",
        "prev": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã_prev."
    },
    "sfu": {
        "current": "–°–§–£",
        "prev": "–°–§–£_prev."
    }
}

# === –ü–æ–ª—É—á–µ–Ω–∏–µ CSV-URL ===
def get_csv_url(sheet_name):
    return f"https://docs.google.com/spreadsheets/d/{SHEET_ID}/gviz/tq?tqx=out:csv&sheet={sheet_name}"

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üîπ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="admin")],
        [InlineKeyboardButton("üîπ –°–§–£", callback_data="sfu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:", reply_markup=reply_markup)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏ –ø–µ—Ä–∏–æ–¥–∞ ===
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    if data in ["admin", "sfu"]:
        user_state[user_id] = {"role": data}
        keyboard = [
            [InlineKeyboardButton("üî∏ –ù–∞—Å—Ç–æ—è—â–∏–π –º–µ—Å—è—Ü", callback_data=f"{data}_current")],
            [InlineKeyboardButton("üî∏ –ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞", callback_data=f"{data}_prev")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=reply_markup)
        return

    if "_current" in data or "_prev" in data:
        role, period = data.split("_")
        user_state[user_id]["period"] = period
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–ø—Ä–∏–º–µ—Ä: 11202025-12450)")
        return

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∏ –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id not in user_state or "period" not in user_state[user_id]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
        return

    ident = update.message.text.strip()
    user_state[user_id]["ident"] = ident

    try:
        hire_date_str, tab_num_str = ident.split("-")
    except:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä: 11202025-12450")
        return

    # --- –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ---
    staff_url = get_csv_url("–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    staff_df = pd.read_csv(staff_url)

    # –ò—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ —Ç–∞–±–µ–ª—å–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
    staff_row = staff_df.loc[staff_df.iloc[:, 3].astype(str) == tab_num_str]

    if staff_row.empty:
        await update.message.reply_text("‚ùå –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return

    hire_date_from_table = str(staff_row.iloc[0, 5]).replace(".", "").replace("/", "")

    if hire_date_str != hire_date_from_table:
        await update.message.reply_text("‚ùå –î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.")
        return

    # --- –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω—É–∂–Ω—ã–π –ª–∏—Å—Ç ---
    role = user_state[user_id]["role"]
    period = user_state[user_id]["period"]
    sheet_name = SHEET_MAP[role][period]

    sheet_url = get_csv_url(sheet_name)
    df = pd.read_csv(sheet_url)

    # –ò—â–µ–º —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤ –ª–∏—Å—Ç–µ
    row = df.loc[df.iloc[:, 3].astype(str) == tab_num_str]

    if row.empty:
        await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ.")
        return

    # –°–æ–±–∏—Ä–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    result_text = f"üíº –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ({sheet_name}):\n\n"
    for col, val in zip(df.columns[4:], row.values[0][4:]):  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 –∫–æ–ª–æ–Ω–∫–∏
        result_text += f"{col}: {val}\n"

    await update.message.reply_text(result_text)

# === –ó–∞–ø—É—Å–∫ ===
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    app.run_polling()

if __name__ == "__main__":
    main()

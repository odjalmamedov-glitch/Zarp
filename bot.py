import logging
import pandas as pd
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8299236175:AAErk_3tfiJoN_2sQigg5VekEyPzDcxP3qg"
SHEET_ID = "1npQ1h6ugPMZXxrNvngAbSsw0oiH2tT4Tx0cwPWqc_aU"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}

# üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_csv_url(sheet_name):
    return f"https://docs.google.com/spreadsheets/d/{SHEET_ID}/gviz/tq?tqx=out:csv&sheet={sheet_name}"

def read_sheet(sheet_name):
    url = get_csv_url(sheet_name)
    df = pd.read_csv(url)
    return df

def parse_identifier(identifier):
    try:
        date_str, tab_number = identifier.split('-')
        return date_str, tab_number
    except Exception:
        return None, None

# üîπ –õ–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–°–§–£"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )

async def handle_position(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text not in ["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–°–§–£"]:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å.")
        return

    user_state[update.effective_chat.id] = {"position": text}
    keyboard = [["–ù–∞—Å—Ç–æ—è—â–∏–π –º–µ—Å—è—Ü", "–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )

async def handle_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    period = update.message.text.strip()

    if chat_id not in user_state or "position" not in user_state[chat_id]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return

    user_state[chat_id]["period"] = period
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–ø—Ä–∏–º–µ—Ä: 11202025-12450)")

async def handle_identifier(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    identifier = update.message.text.strip()
    date_str, tab_number = parse_identifier(identifier)

    if not date_str or not tab_number:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 11202025-12450")
        return

    info = user_state.get(chat_id, {})
    position = info.get("position")
    period = info.get("period")

    if not position or not period:
        await update.message.reply_text("‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å /start")
        return

    sheet_map = {
        ("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–ù–∞—Å—Ç–æ—è—â–∏–π –º–µ—Å—è—Ü"): "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã",
        ("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞"): "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã_prev.",
        ("–°–§–£", "–ù–∞—Å—Ç–æ—è—â–∏–π –º–µ—Å—è—Ü"): "–°–§–£",
        ("–°–§–£", "–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞"): "–°–§–£_prev."
    }

    sheet_name = sheet_map.get((position, period))
    if not sheet_name:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞.")
        return

    try:
        df_staff = read_sheet("–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        df_salary = read_sheet(sheet_name)
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø.")
        logging.error(e)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –¥–∞—Ç—É –ø—Ä–∏—ë–º–∞
    staff_row = df_staff[df_staff["D"].astype(str).str.strip() == tab_number]
    if staff_row.empty:
        await update.message.reply_text("‚ùå –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return

    hire_date = staff_row.iloc[0]["F"].replace(".", "")
    if date_str != hire_date:
        await update.message.reply_text("‚ùå –î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.")
        return

    salary_row = df_salary[df_salary["D"].astype(str).str.strip() == tab_number]
    if salary_row.empty:
        await update.message.reply_text("‚ùå –ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º –ª–∏—Å—Ç–µ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    data = salary_row.to_dict(orient="records")[0]
    text = f"‚úÖ {position}\nüìÖ {period}\n\n"
    for col, val in data.items():
        text += f"{col}: {val}\n"

    await update.message.reply_text(text)

# üîπ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^(–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä|–°–§–£)$"), handle_position))
    app.add_handler(MessageHandler(filters.Regex("^(–ù–∞—Å—Ç–æ—è—â–∏–π –º–µ—Å—è—Ü|–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞)$"), handle_period))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_identifier))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling()

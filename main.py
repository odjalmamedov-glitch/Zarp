#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–π Google –¢–∞–±–ª–∏—Ü—ã (–ø–æ ID) –∏ –≤—ã–≤–æ–¥–∞
–¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –°–§–£) –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –î–î–ú–ú–ì–ì–ì–ì-–ß–ß–ß–ß.

–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ credentials ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π CSV-—ç–∫—Å–ø–æ—Ä—Ç Google Sheets.
"""

import sys
import re
import csv
import requests
from datetime import datetime
from urllib.parse import quote_plus

# -----------------------
# –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
SPREADSHEET_ID = "1npQ1h6ugPMZXxrNvngAbSsw0oiH2tT4Tx0cwPWqc_aU"

ADMIN_SHEET = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"
SFU_SHEET = "–°–§–£"
ADMIN_PREV_SHEET = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã_prev."
SFU_PREV_SHEET = "–°–§–£_prev."
EMPLOYEE_LIST_SHEET = "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
# -----------------------

ADMIN_COLUMNS = [
    "–ö–æ–ª-–≤–æ —Å–∏–º-–∫–∞—Ä—Ç", "–ë–æ–Ω—É—Å –∑–∞ UCELL", "–ö–æ–ª-–≤–æ –ª–∏–º–∏—Ç–æ–≤ —Å –∫–æ—ç—Ñ—Ñ–æ–º", "–ü–ª–∞–Ω –ø–æ –ª–∏–º–∏—Ç–∞–º",
    "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ –ª–∏–º–∏—Ç–∞–º", "–ë–æ–Ω—É—Å –∑–∞ –ª–∏–º–∏—Ç—ã", "–ö–æ–ª-–≤–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫–∞—Ä—Ç",
    "–ü–ª–∞–Ω –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –∫–∞—Ä—Ç–∞–º", "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –∫–∞—Ä—Ç–∞–º",
    "–ë–æ–Ω—É—Å –∑–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –∫–∞—Ä—Ç–∞–º", "SLA –ø—Ä–∏—ë–º–∫–∏", "–ü–æ–Ω–∏–∂–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç SLA",
    "–û—à–∏–±–æ—á–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤", "–ü–æ–Ω–∏–∂–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—Ç–æ–≤",
    "–†–µ–∑—É–ª—å—Ç–∞—Ç –í–ß–õ", "–í–ß–õ", "–ë–æ–Ω—É—Å –∑–∞ –í–ß–õ", "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
    "–û–±—â–∞—è —Å—É–º–º–∞ –±–æ–Ω—É—Å–∞", "–ë–æ–Ω—É—Å + –¥–æ–ø. –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ —Ä—É–∫–∏",
    "–ì—Ä–æ—Å—Å –∏—Ç–æ–≥ –±–æ–Ω—É—Å–∞", "–ë–æ–Ω—É—Å + –¥–æ–ø. –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤ –≥—Ä–æ—Å—Å–µ"
]

SFU_COLUMNS = [
    "–ö–æ–ª-–≤–æ —Å–∏–º-–∫–∞—Ä—Ç", "–ü–ª–∞–Ω UCELL", "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ UCELL", "–ë–æ–Ω—É—Å –∑–∞ UCELL",
    "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã —Ñ–∞–∫—Ç", "–ü–ª–∞–Ω –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –∫–∞—Ä—Ç–∞–º", "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –∫–∞—Ä—Ç–∞–º",
    "–ë–æ–Ω—É—Å –∑–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã", "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã", "–û—à–∏–±–æ—á–Ω—ã–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –±–∫",
    "–†–µ–∑—É–ª—å—Ç–∞—Ç –í–ß–õ", "–í–ß–õ", "–ë–æ–Ω—É—Å –∑–∞ –í–ß–õ", "–û–±—â–∞—è —Å—É–º–º–∞ –±–æ–Ω—É—Å–∞",
    "–ë–æ–Ω—É—Å + –¥–æ–ø. –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ —Ä—É–∫–∏", "–ì—Ä–æ—Å—Å –∏—Ç–æ–≥ –±–æ–Ω—É—Å–∞", "–ë–æ–Ω—É—Å + –¥–æ–ø. –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤ –≥—Ä–æ—Å—Å–µ"
]


# -----------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------
def fetch_sheet_as_rows(sheet_name):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–∏—Å—Ç –ø–æ –∏–º–µ–Ω–∏ –∫–∞–∫ CSV –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —Å–ø–∏—Å–æ–∫ —è—á–µ–µ–∫).
    –¢—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã —Ç–∞–±–ª–∏—Ü–∞ –±—ã–ª–∞ –ø—É–±–ª–∏—á–Ω–∞ (–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ —Å—Å—ã–ª–∫–µ).
    """
    safe_name = quote_plus(sheet_name)
    url = f"https://docs.google.com/spreadsheets/d/{SPREADSHEET_ID}/gviz/tq?tqx=out:csv&sheet={safe_name}"
    try:
        resp = requests.get(url, timeout=15)
    except Exception as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Google Sheets: {e}")
    if resp.status_code != 200:
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –ª–∏—Å—Ç '{sheet_name}'. HTTP {resp.status_code}")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –µ—ë –Ω–µ —É–∫–∞–∑–∞–ª
    resp.encoding = resp.apparent_encoding or "utf-8"
    text = resp.text
    reader = csv.reader(text.splitlines())
    rows = [row for row in reader]
    return rows


def normalize_date_value(value):
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∫ —Ñ–æ—Ä–º–∞—Ç—É DD.MM.YYYY –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
    if value is None:
        return ""
    s = str(value).strip()
    if not s:
        return ""
    # –ï—Å–ª–∏ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å —Ç–æ—á–∫–∞–º–∏ –∏–ª–∏ –¥–µ—Ñ–∏—Å–∞–º–∏/—Å–ª–µ—à–∞–º–∏ ‚Äî –∑–∞–º–µ–Ω–∏–º –Ω–∞ —Ç–æ—á–∫–∏
    s = s.replace("/", ".").replace("-", ".")
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ Excel-—á–∏—Å–ª–æ (–∫–æ–º–∞ –∏–ª–∏ —Ç–æ—á–∫–∞) ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —á–µ—Ä–µ–∑ datetime
    patterns = ["%d.%m.%Y", "%d.%m.%y", "%Y-%m-%d", "%d/%m/%Y"]
    for p in patterns:
        try:
            dt = datetime.strptime(s, p)
            return dt.strftime("%d.%m.%Y")
        except Exception:
            continue
    # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ: 8-10 —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥ -> —Ä–∞—Å–ø–∞—Ä—Å–∏–º –∫–∞–∫ DDMMYYYY
    m = re.search(r"(\d{2})(\d{2})(\d{4})", s)
    if m:
        return f"{m.group(1)}.{m.group(2)}.{m.group(3)}"
    return s


def validate_identifier_and_lookup(identifier):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ DDMMYYYY-NNNN –∏ —Å–≤–µ—Ä—è–µ—Ç
    —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –¥–∞—Ç—É –Ω–∞–π–º–∞ —Å–æ '–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤' (–∫–æ–ª–æ–Ω–∫–∏ D –∏ F).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_valid_bool, personnel_number, hire_date) .
    """
    m = re.match(r"^(\d{2})(\d{2})(\d{4})-(\d{4,5})$", identifier)
    if not m:
        return False, None, None
    dd, mm, yyyy, personnel = m.groups()
    hire_date = f"{dd}.{mm}.{yyyy}"

    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–∏—Å—Ç "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
    try:
        rows = fetch_sheet_as_rows(EMPLOYEE_LIST_SHEET)
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ‚Äî —Å—á–∏—Ç–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
        # –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å '–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤': {e}")
        return False, personnel, hire_date

    # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π.
    for idx, row in enumerate(rows[1:], start=2):
        # –ö–æ–ª–æ–Ω–∫–∞ D -> –∏–Ω–¥–µ–∫—Å 3, –∫–æ–ª–æ–Ω–∫–∞ F -> –∏–Ω–¥–µ–∫—Å 5
        sheet_personnel = ""
        sheet_hire = ""
        try:
            sheet_personnel = str(row[3]).strip()
        except Exception:
            sheet_personnel = ""
        try:
            sheet_hire = normalize_date_value(row[5])
        except Exception:
            sheet_hire = normalize_date_value(row[5] if len(row) > 5 else "")
        if sheet_personnel.replace(" ", "") == personnel.replace(" ", "") and sheet_hire == hire_date:
            return True, personnel, hire_date
    return False, personnel, hire_date


def get_sheet_name(role, month):
    if role == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
        return ADMIN_SHEET if month == "–ù–∞—Å—Ç–æ—è—â–∏–π –º–µ—Å—è—Ü" else ADMIN_PREV_SHEET
    else:
        return SFU_SHEET if month == "–ù–∞—Å—Ç–æ—è—â–∏–π –º–µ—Å—è—Ü" else SFU_PREV_SHEET


def process_user_input(role, month, identifier):
    started = datetime.now()
    print(f"–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {role}, {month}, {identifier}")

    if role not in ["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–°–§–£"]:
        return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –£–∫–∞–∂–∏—Ç–µ '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' –∏–ª–∏ '–°–§–£'."

    if month not in ["–ù–∞—Å—Ç–æ—è—â–∏–π –º–µ—Å—è—Ü", "–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞"]:
        return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –º–µ—Å—è—Ü. –í—ã–±–µ—Ä–∏—Ç–µ '–ù–∞—Å—Ç–æ—è—â–∏–π –º–µ—Å—è—Ü' –∏–ª–∏ '–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞'."

    is_valid, personnel_number, hire_date = validate_identifier_and_lookup(identifier)
    if not is_valid:
        return ("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ '–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'. "
                "–§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –î–î–ú–ú–ì–ì–ì–ì-–ß–ß–ß–ß (–Ω–∞–ø—Ä–∏–º–µ—Ä: 13102025-9224).")

    sheet_name = get_sheet_name(role, month)
    # –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—Å—Ç –∫–∞–∫ CSV
    try:
        rows = fetch_sheet_as_rows(sheet_name)
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏—Å—Ç–∞ '{sheet_name}': {e}"

    if len(rows) < 2:
        return f"‚ùå –õ–∏—Å—Ç '{sheet_name}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–æ–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ)."

    headers = rows[1]  # —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–≤–æ–µ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ
    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
    headers = [h.strip() for h in headers]

    if "–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä" not in headers:
        return "‚ùå –û—à–∏–±–∫–∞: —Å—Ç–æ–ª–±–µ—Ü '–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö."

    personnel_idx = headers.index("–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä")

    target_row = None
    for row in rows[2:]:
        # –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä–æ—á–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if personnel_idx >= len(row):
            continue
        cell = str(row[personnel_idx]).replace(" ", "")
        if cell == personnel_number:
            target_row = row
            break

    if not target_row:
        return f"‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ {personnel_number} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –ª–∏—Å—Ç–µ '{sheet_name}'."

    columns = ADMIN_COLUMNS if role == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" else SFU_COLUMNS
    lines = [
        f"üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è {role} (–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {personnel_number}, –ú–µ—Å—è—Ü: {month})",
        f"–î–∞—Ç–∞ –Ω–∞–π–º–∞: {hire_date}",
        ""
    ]

    for col in columns:
        if col in headers:
            idx = headers.index(col)
            val = ""
            if idx < len(target_row):
                val = target_row[idx].strip()
            lines.append(f"{col}: {val or '0'}")
        else:
            # –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –≤ –ª–æ–≥, –Ω–æ –Ω–µ –ª–æ–º–∞–µ–º –≤—ã–≤–æ–¥
            print(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Å—Ç–æ–ª–±–µ—Ü '{col}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ '{sheet_name}' (–ø—Ä–æ–ø—É—Å–∫–∞—é).")

    elapsed_ms = int((datetime.now() - started).total_seconds() * 1000)
    lines.append("")
    lines.append(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_ms} –º—Å")

    return "\n".join(lines)


# -----------------------
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚Äî CLI
# -----------------------
def print_usage_and_exit():
    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print("  python3 main.py [–†–æ–ª—å] [–ú–µ—Å—è—Ü] [–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä]")
    print("–ü—Ä–∏–º–µ—Ä:")
    print("  python3 main.py –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä \"–ù–∞—Å—Ç–æ—è—â–∏–π –º–µ—Å—è—Ü\" 13102025-9224")
    print("–ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä.")
    sys.exit(0)


if __name__ == "__main__":
    # –ê—Ä–≥—É–º–µ–Ω—Ç—ã: role, month, identifier
    if len(sys.argv) == 4:
        role_arg = sys.argv[1]
        month_arg = sys.argv[2]
        id_arg = sys.argv[3]
    elif len(sys.argv) == 2 and sys.argv[1] in ("-h", "--help"):
        print_usage_and_exit()
    else:
        # –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–∑–∞–º–µ–Ω–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        role_arg = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        month_arg = "–ù–∞—Å—Ç–æ—è—â–∏–π –º–µ—Å—è—Ü"
        id_arg = "13102025-9224"

    try:
        out = process_user_input(role_arg, month_arg, id_arg)
        print("\n--- –†–ï–ó–£–õ–¨–¢–ê–¢ ---\n")
        print(out)
    except Exception as exc:
        print(f"–ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {exc}")
        sys.exit(1)
